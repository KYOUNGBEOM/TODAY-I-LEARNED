#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
using namespace std;
vector<int> v;

// 오름차순 기반 순열
// next_permutation

//void print(vector<int> &v) {
//	for (int i = 0; i < v.size(); i++) {
//		cout << v[i] << " ";
//	}
//	cout << "\n";
//}
//
//int main() {
//	for (int i = 1; i <= 3; i++)v.push_back(i);
//	
//	do {
//			print(v);
//		} while(next_permutation(v.begin(), v.end()));
//	
//	return 0;
//	
//}

// 재귀함수로 순열 만들기

//void print(vector<int> &v) {
//	for (int i = 0; i < v.size(); i++) {
//		cout << v[i] << " ";
//	}
//	cout << "\n";
//}
//
//void makePermutation(int n, int r, int depth) {
//	if (r == depth) {
//		print(v);
//
//	}
//	for (int i = depth; i < n; i++) {
//		swap(v[i], v[depth]);
//		makePermutation(n, r, depth + 1);
//		sawpr(v[i], v[depth]);
//	}
//}
//
//int main() {
//	int a[3] = { 1, 2, 3 };
//	for (int i = 0; i < 3; i++)v.push_back(a[i]);
//	makePermutation(3, 3, 0);
//	return 0;
//}

// 재귀함수로 조합 만들기

//int n = 5;
//int k = 3;
//int a[5] = { 1, 2, 3, 4, 5 };
//
//void print(vector<int> b) {
//	for (int i : b) {
//		cout << i << " ";
//	}
//	cout << "\n";
//}
//
//
//void combi(int start, vector<int> b) {
//	if (b.size() == k) {
//		print(b);
//		return;
//	}
//	for (int i = start + 1; i < n; i++) {
//		b.push_back(i);
//		combi(i, b);
//		b.pop_back();
//	}
//
//}
//
//int main() {
//	vector<int> b;
//	combi(-1, b);
//
//	return 0;
//}

// 중첩 for문으로 조합

int n = 5;
int k = 3; 

int main() {

	for(int i = 0; i < n; i++) {
		for (int j = i+1; j < n; j++) {
			for (int k = j+1; k < n; k++) {
				cout << i << " : " << j << " : " << k << "\n";
			}
		}
	}


}

 
