정점과 간선
- 어떠한 곳이나 어떠한 사람으로부터 무언가로 간다고 했을 때 
  어떠한 곳이나 어떠한 사람은 정점(Vertex), 무언가로 간다는 간선(Edge)가 된다.
- 예를 들어, 짝사랑은 단방향간선 , 서로 좋아하는 것은 양방향간선
- 정점으로부터 나가는 간선 outdegree, 들어오는 간선 indegree
- 정점과 간선으로 이루어진 집합을 graph라고 함.


트리
- 그래프 이론에서 사이클이 없는 무방향 그래프 또는 사이클이 없는 방향 그래프인 DAG(Directed Acyclic graph)를 의미
- 루트노드 >> 내부노드 >> 리프노드\
- 부모 자식의 계층 구조를 가짐
- V - 1 = E라는 특징. 즉, 노드의 수 - 1 = 간선의 수
- 트리의 높이 : 루트노드부터 리프노드까지의 높이
- 이진트리 : 자식의 노드 수가 2개 이하인 트리
- 이진탐색트리 : 노드의 오른쪽 하위 트리에는 노드의 값보다 큰 값, 왼쪽 하위 트리에는 노드의 값보다 작은 값이 들어있는 트리

DAG
- 추후 dp를 배울때 무조건 DAG를 만들어서 문제를 풀어야한다.

연결된 컴포넌트
- 연결되어있는 정점과 간선의 집합을 의미
- 연결되어있는지, 않는지를 토대로 연결된 컴포넌트로 나눈다

그래프 표현방법
- 인접행렬 : 그래프에서 정점과 간선의 관계를 나타내는 정사각형 행렬 / 보통 불리언 2차원 병렬을 사용 / 시간복잡도 O(V^2)
- 인접리스트 : 정점에서 정점을 연결하는 것을 하나의 연결 리스트를 통해 표현하는 것을 의미 / 시간복잡도 O(V+E)
- 보통 연결리스트로 문제를 풀고, 만약 문제에서 인접행렬로 주어졌다면 인접행렬로 푸는 것이 좋다.

DFS, 깊이우선탐색 
- 특정한 노드에서 가장 멀리 있는 노드를 먼저 탐색하는 알고리즘
- 주어진 맵전체를 탐색하며 한 번 방문한 노드는 다시 방문하지 않는다. / 인접리스트로 이루어진 맵의 경우 O(V+E), 인접행렬의 경우 O(V^2)

BFS, 너비우선탐색
- 그래프를 탐색하는 알고리즘
- 노드에서 시작해 이웃한 노드들을 먼저 탐색하는 알고리즘이자 같은 가중치를 가진 그래프에서 최단거리 알고리즘으로 사용
- 시간복잡도는 DFS와 같고, 한 번 방문한 노드는 사디 방문하지 않음.
- 가중치가 다른 그래프 내에서 최단거리 알고리즘은 다엑스트라, 벨판포드 등을 사용해야함.
