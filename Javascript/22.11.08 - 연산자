연산
- 규칙에 따라 계산하여 값을 구함

연산자 형태
- +, -, *, /, %
- >, >=, <, <=
- ==, !=, ===, !==
- 콤마(,) typeof, delete, void 
- instanceof, in, new 등

표현식
- 자바스크립트는 표현식의 연결이다.
- 1+2 / var total = 1+2; / var value = total / (2+3);
- 표현식을 평가한다고 표현한다.
- 표현식을 평가하면 결과가 반환되며, 이를 평가 결과라고 한다.

할당 연산자
- 단일 할당 연산자
  1. = 하나만 사용
  2. var result = 1+2;
  
- 복합 할당 연산자
  1. = 앞에 연산자 작성
  2. +=, -=, *=, /=, %=
  3. <<=, >>=
  4. >>>=, &=, ^=, |=
  5. 먼저 = 앞을 연산한 후, 할당
     - var point = 7;
     - point += 3;

해석
- JS 코드를 기계어로 바꾸는 것, Compile
- 엔진이 해석하고 실행한다라고 표현
실행 순서
- var result = 1 + 2 + 6;
  1. 왼쪽의 표현식을 평가
  2. = 오른쪽의 표현식 평가, 이때 왼쪽에서 오른쪽으로 평가(1 + 2 + 6)
  3. 오른쪽 표현식의 평가 결과를 왼쪽 표현식 평가 결과에 할당
  
산술 연산자(+)
- + 양쪽의 표현식을 평가, 평가 결과를 더함
- 평가 결과 연결, 한 쪽이라도 숫자가 아니면 연결
- var two = "2";
  var value = 1 + two;
  log(value) // 12
  log(typeof value) // string
- 1 + 5 + "ABC" 의 결과는 ? 6ABC
  1. 우선 1과 5를 더하여 6
  2. 이어서 6과 "ABC를 연결
  
숫자로 변환
- 연산하기 전에 우선 숫자로 변환
- 변환된 값으로 연산
  undefined >> NAN
  Null >> +0
  Boolean >> true:1, false:0
  Number >> 변환 전/후 같음
  String >> 값이 숫자이면 숫자로 연산 / 단, 더하기(+)는 연결
  
  var value;
  log(10 + value);
  1. value 값은 undefined
  2. 10과 undefined를 더하면 NaN(NaN도 값이다.)
  
  log(10 + Null); // 10
  log(10 + true); // 11
  log(10 + false); // 10
  
  log(10 + "123"); // 10123 >> 더하기는 값이 숫자라도 타입이 String이면 문자열로 연결
  log(123 - "23"); // 100 >> -, *, /는 숫자로 변환하여 연산
  
  산술 연산자(-)
  - 왼쪽 표현식 평가 결과에서 오른쪽 평가 결과를 뺀다.
  - String타입이지만, 값이 숫자이면 Number타입으로 변환하여 계산
  
  산술 연산자(*)
  - 왼쪽 표현식 평가 결과와 오른쪽 표현식 평가 결과를 곱한다.
  - 숫자 값으로 변환할 수 있으면 변환하여 곱한다.
  - 양쪽의 평가 결과가 하나라도 숫자가 아닐때 / 소수 값이 생기는 경우 NaN을 반환한다.
    log(10 * "20"); // 200 // String 타입이지만 값이 숫자이기 때문에 Number 타입으로 변환
    log(10 * true); // 10 >> true 1으로 변환
    log(10 * false); // 0 >> false 0으로 반환
    log(10 * null); // 0 >> null 0 으로 반환
    log(10 * "A"); // NaN
    log(2.3 * 3); // 6.8999999999999995 >> IEEE 754 유동 소수점 처리 때문에 다음과 같은 값이 출력
    log(2.3 * 10 * 3 / 10); // 6.9 >> 실수를 정수로 변환하여 값을 구하고, 다시 정수를 실수로 변환
    
  산술 연산자(/)
  - 왼쪽 표현식 평가 결과를 오른쪽 표현식 평가 결과로 나눈다.
  - 양쪽의 평가 결과가 하나라도 숫자가 아닐때 / 분모, 분자 모두 0 일때 NaN을 반환한다.
  - 분모, 분자가 0 일 때 >> 분모가 0 이면 Infinity, 분자가 0이면 0 반환
    log(2 / "A") // NaN
    log(0 / 0) // NaN
    log(2 / 0) // Infinity
    log(0 / 2) // 0
    
 산술 연산자(%)
 - 왼쪽 표현식 평가 결과를 오른쪽 표현식 평가 결과로 나누어 나머지를 구한다.
 - 3 % 2의 나머지는 1
   log(5 % 2.5); // 0
   log(5 % 2.3) // 0.40000000000000036 >> IEEE 754 유동 소수점 처리 때문
   log((5 * 10 - (2 * 2.3 * 10)) / 10); // 0.4 >> 실수를 정수로 변환하여 연산하고, 다시 정수를 실수로 변환
   
 단항 + 연산자
 - 형태: +value
 - 값을 Number 타입으로 변환
 - Number()도 같은 기능
   value = "7";
   log(typeof value); // string
   log(typeof +value); // number
   log(typeof Number(value); // number
   1. string 타입을 Number 타입으로 변환
   2. Number() 함수가 가독성이 더 좋다.

단항 - 연산자
- 형태: -value
- 값의 부호를 바꾼다.
- 연산할 때만 바꾼다, 원래 값은 바뀌지 않는다.
  var value = 7;
  log(-value); // -7
  log(8 + -value); // 1
  log(value); // 7 >> value 변수값의 부호는 바뀌지 않는다.
  
 후치 ++ 연산자
 - 형태: value++
 - 값을 자동으로 1 증가시킨다.
 - 문장을 수행한 후 1증가 / 즉, 세미콜론(;) 다음에서 증가
   log one = 1;
   var value = one++ + 3;
   log(value); // 4
   log(one); // 2
   1. one++를 하면 증가하여 2가 되지만, 문장 안이므로 1이 증가하지 않은채로 연산된다.
   2. 따라서 1 + 3 = 4라는 연산 후에 증가하여 2가된다.
   
 전치 ++ 연산자
 - 형태: ++value
 - 값을 자동으로 1 증가시킨다.
 - 문장 안에서 1증가
 - 표현식을 평가하기 전에 1증가 / 표현식에서 증가된 값을 사용
   var one = 1;
   var value = ++one + 3;
   log(value); // 5
   1. 문장이 끝나기 전이지만 먼저 1을 증가시키고 3을 더한다.
   2. 2 + 3을 하게 되므로 5가 출력된다.
   
후치 -- 연산자
- 형태: value--
- 값을 자동으로 1 감소시킨다.
- 문장을 수행한 후에 1감소 / 즉, 세미콜론(;) 다음에 감소
   log two = 2;
   var value = two-- + 3;
   log(value); // 5
   log(one); // 1
   
전치 -- 연산자
- 형태: --value
- 값을 자동으로 1 감소시킨다.
- 문장 안에서 1감소
- 표현식을 평가하기 전에 1 감소 / 표현식에서 감소된 값을 사용
  var two = 2;
  var value = --two + 3;
  log(value); // 4
  
! 연산자
- 논리(Logical) NOT 연산자
- 표현식 평가 결과를 true, false로 반환한 후 true이면 false를 false이면 true를 반환한다.
- 원래 값은 바뀌지 않고, 사용할 때만 변환된다.
  var value = true;
  log(!value); // false
  log(!!"A"); // true >> A는 true !A는 false !!A는 true
  
유니코드
- 세계의 모든 문자를 통합하여 코드화
- 언어, 이모지 등
- 코드 값을 코드 포인트라고 부름
- 0000 ~ FFFF, 10000 ~ 1FFFF값에 문자 매핑
- 유니코드 컨소시엄 https://home.unicode.org/
- 표기방법
  1. u와 숫자 형태 : u0031 
  2. JS는 u앞에 역슬래시(\) 작성
     log("\u0031"); // 1
     log("\u0041"); // A
  3. 역슬래시(\)를 문자로 표시하려면 역슬래시(\\) 2개 작성
  4. ES6에서 표기 방법 추가 >> ES5에서는 4자리만 지원, ES6부터 5자리 지원

UTF
- Unicode Transformation Format
- 유니코드의 코드 포인트를 매핑하는 방법
- UTF-8, UTF-16, UTF-32로 표기
- <meta charset = "utf-8">
- UTF-8은 8비트로 코드 포인트 매핑
- 8비트 인코딩(Encoding)이라고 부름

관계 연산자
- <, >, <=, >= 연산자
  1. 한 쪽이 String 타입이면 false, 양쪽이 모두 String 타입이면 유니코드 사전 순서로 비교 
     log(("\u0033" > "\u0032")); // true
     log("A" > "1"); // true
     log("가" > "다") // false
     log("A07" > "A21"); // false >> 왼쪽에서 오른쪽으로 문자 하나씩 비교, A와 A가 같으므로 다음을 비교, 결정이 되면 다음것은 비교하지 않음.
- instanceof 연산자
- in 연산자

동등 == 연산자
- 왼쪽과 오른쪽 값이 같으면 true, 다르면 false
- 값 타입은 비교하지 않음. / 1과 "1"이 같음.
  var value;
  log(value == null) // true >> undefined 와 null의 값은 0이다. 타입이 다르지만 ture가 반환된다.
  
부등 != 연산자
- 왼쪽과 오른쪽 값이 다르면 ture, 같으면 false
- a != b와 !(a == b)가 같다.

일치 === 연산자
- 왼쪽과 오른쪽의 값과 타입이 모두 같으면 true, 다르면 false
- 1 === 1 // true, 1 === "1" // false, Nuber와 String은 타입이 다르기 때문  
  var value;
  log(value === null); // false, 값과 타입 모두 비교
  log(value == null); // true, 값만 비교

불일치 !== 연산자
- 값 또는 타입이 다르면 true, 같으면 false

콤마 연산자
- 콤마로 표현식을 분리
  var a = 1, b = 2;
  
그룹핑 연산자
- 소괄호( ) 안의 표현식을 먼저 평가

논리 || 연산자
- 논리 OR 연산자
- 표현식의 평가 결과가 하나라도 true이면 true, false이면 false
  var vaule, zero = 0, two = 2;
  log(value || zero || two); // 2 >> value 변수값 undefined이므로 false, zero 변수값 0이므로 false, two 변수값 2이므로 true >> true가 아니라 true가 되는 변수값 반환
  log(zero || value); // undefined >> 마지막까지 비교하였는데 false 이면 false가 아니라 마지막 변수값 반환 
- 왼쪽 결과가 true이면 오른쪽은 비교하지 않는다.
  var one = 1;
  log(one === 1 || two === 2); // true >> 왼쪽 비교 결과가 true이면 오른쪽은 비교하지 않음. 오른쪽을 비교하면 two 변수가 없으므로 에러 발생

논리 && 연산자
- 논리 AND 연산자
- 표현식의 평가 결과가 모두 true이면 true, 하나라도 false 이면 false
  var one = 1, two = 2;
  log(one && two); // 2 >> one 변수값 1이므로 true, two 변수값 2이므로 true, 모두가 true이므로 마지막 변수의 변수값 반환
- 왼쪽 결과가 false이면 오른쪽은 비교하지 않음
  var one = 1, zero = 0;
  log(one && zero && two); // 0 >> one 변수값 1이므로 true, zero 변수값 0이므로 false, 오른쪽을 비교하면 two 변수가 없으므로 에러 발생

조건 연산자
- 기호: exp ? exp-1: exp-2
- 3항 연산자라고도 함.
- exp 위치의 표현식을 먼저 평가 >> true이면 exp-1의 결과 반환, false 이면 exp-2의 결과 반환
  log(1 === 1 ? "같음" : "다름"); // 같음
  log(1 === "1" ? "같음" : "다름:); // 다름

연산자 우선순위
- 연산자 실행 우선순위(ECMA-262 스펙에 없음)
- 우선순위가 가장 높은 것은 ( )
- 연산자 우선순위 : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
