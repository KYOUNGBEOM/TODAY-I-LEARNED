문장
- 형태: 세미콜론(;)
- 문장을 끝나게 하는 역할

화이트 스페이스
- 사람 눈에 보이지 않는 문자(가독성을 위해서)
- 문자마다 기능을 갖고 있음
- TAB(\u0009), Space(\u0020), NBSP(\u00A0)


세미콜론 자동삽입
- 문장 끝에 작성
- JS엔진이 분석하여 자동으로 삽입(ES5부터 지원)
  var one = 1
  var two = 2;
  log(one); // 1
  
 블록
 - 형태: {문장 리스트opt}
 - 중괄호 { }, 실행 그룹으로 블록 안의 모든 문장 실행
 - 문장 리스트 작성은 선택
  
 if
 - if(표현식) 문장1
 - if(표현식) 문장1 else 문장2
 - 먼저 표현식을 평가 
 - 평가 결과를 true/false로 변환
  
 debugger
 - debugger 위치에서 실행 멈춤
 - 브라우저의 개발자 도구 창이 열려있을 때만 멈춤
 - ES5부터 지원
   
 while 
 - 형태: while(표현식) 문장
 - 표현식의 평가 결과가 false가 될 때까지 반복 실행
   
 do ~ while
 - 형태: do 문장 while(표현식)
 - 처리방법은 while문과 같음
   var k = 0;
   do {
     log("do:", k);
     k++
   } while ( k < 3){
      log("while:", k);
   }; // do:0 do:1 do:2 while:3
   1. do문을 실행 
   2. while 문 표현식 평가
   3. true이면 do문 실행, false이면 while 블록문 실행
    
   for ( )  
   - 형태: for(초기값opt; 비교opt; 증감opt;) 문장
   - 2번째 비교 표현식의 평가 결과가 true인 동안 문장을 반복 실행
     1. 증감 생략 코드
        for(var k = 0; k < 3;){
         log(k);
         k++
        }
      2. 초기값과 증감 생략 코드
         var k = 0;
         for(; k < 3;){
          log(k);
          k++
         };
         for 문에 초기값을 작성하지 않더라도 ; 은 작성해야 함                     
      3. 비교와 증감 생략 코드
         for(var k = 0; ;){
          log(k);
          k++;
          if(k > 2){
           break;
          };
         };
      4. 모두 생략
         var k = 0;
         for( ; ; ){
          log(k);
          if(k == 2){
           break; // for문 종료
          };
          k++
         }; // 0 1 2 

break
- 형태: break; / break 식별자;
- 반복문 종료
- for, for ~ in, while, do ~ while, switch에서 사용

continue
- 형태: continue; / continue 식별자;
- 반복문의 처음으로 분기
- for, for ~ in, while, do ~ while에서 사용

switch
- 형태: switch(표현식){
         case 표현식: 문장 리스트opt
         default 표현식: 문장 리스트opt
        };
        var exp = 1;
        switch(exp){
         case 1:
          log(100);
         case 2:
          log(200);
        }; // 100 200
        1. exp의 값이 1이므로 case1 실행
        2. break가 없으면 case1 아래 모든 문장 수행
- switch 표현식의 평가 값과 일치하는 case 문 수행
- break 사용
- 일치하는 case 없으면 default 수행
        var exp = 7;
        switch(exp){
         case 1:
          value = 100;
         default:
          value = 700;
         case 2:
          value = 200;
        }; 
        log(value) // 200
        1. 일치하는 case가 없으므로 dafault 실행
        2. break가 없으므로 case2도 실행
- OR(||)형태
  var exp = 3;
  switch(exp){
   case2:
   case3:
    log(100);
  }; // 100
  1. exp 값이 2 또는 3이면 case 수행
  
try-catch
- 형태: try 블록 catch(식별자) 블록 / try 블록 finally 블록 / try 블록 catch(식별자) 블록 finally 블록
  var value;
  try{
   value = ball;
  } catch(error){
     log("catch 실행");
  };
  1. ball 변수가 없으므로 에러 발생
  2. 에러 발생시 catch(error) 블록 실행 / 파라미터 error에 JS Error 오브젝트 설정
  3. error는 식별자로 다른 이름 사용가능
  4. 에러가 발생할 가능성이 있으면 반드시 try-catch문 사용
- try 문에서 예외 발생을 인식
- 예외가 발생하면 catch 블록 실행
- finally 블록은 예외 발생과 관계없이 실행

throw
- 형태: throw 표현식;
- 명시적으로 예외를 발생
- 예외가 발생하면 catch 실행
  1. 예외를 발생시킴
     try{
      throw "예외 발생시킴";
      var sports = "스포츠"; 
     } catch(error){
        log(error);
        log(sports);
     } // 예외 발생시킴
  2. {name : 메시지} 형태
     try{
      throw{
       msg: "예외 발생",
       bigo: "임의의 이름 사용"
       };
     } catch(error){
        log(error.msg);
        log(error.bigo);
     };
   3. Error 오브젝트 사용
      try{
       throw new Error("예외 발생");
      } catch(error){
         log(error.massage);
      };
      1.throw 표현식에 Error 오브젝트 작성
      2.Error( ) 파라미터에 메시지 작성
      3.오브젝트의 message에 메시지 설정
      4.catch(error)의 error에 Error 오브젝트 설정
   
strict 모드
- 형태: "use strict"
- 엄격하게 JS 문법 사용의 선언
- 작성한 위치부터 적용
- ES5부터 지원
  book = "책";
  log(book);
  1. var을 작성하지 않아도 에러가 나지 않음
  
  "use strict"
  try{
  book = "변수 선언하지 않음";
  } catch(error){
     log(error.message);
  } // book is not defined
